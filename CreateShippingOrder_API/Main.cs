/***************************************************************
    *  DO NOT EDIT THIS FILE!
    *         
    *  This file is automatically generated by HP Service Test.
    *  Manually changing the contents of this file may result in 
    *  loss of information.
    *          
    *  To edit the test, open the file ‘CreateShippingOrder_API.st’ 
    *  in HP Service Test.
     ***************************************************************/
    
    namespace Script
    {
    using System;
    using System.Text;
    using System.Threading;
    using System.Xml;
    using System.Xml.Schema;
    using HP.ST.Fwk.ReporterFWK;
    using HP.ST.Shared.Utilities;
    using HP.ST.Ext.BindingImpl.Getters;
    using HP.ST.Ext.BindingImpl.Setters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.PropInfo;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Getters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Setters;
    using HP.ST.Fwk.RunTimeFWK;
    using HP.ST.Fwk.RunTimeFWK.Utilities;
    using HP.ST.Fwk.RunTimeFWK.HelperClasses;
    using HP.ST.Fwk.RunTimeFWK.CompositeActivities;
    using HP.ST.Ext.BindingImpl.Setters.DataSourceSetters;
    using HP.ST.Fwk.JVMLoader;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using HP.ST.Fwk.SOAReplayAPI;
    using HP.ST.Fwk.UFTLicensing;
    
    
    
    public partial class WorkFlowScript : STWorkFlowScriptBase
    {    
    	TestUserCode _userCode = null;
    	TestEntities _flow = null;
    	static Reporter reporter;
    	int reportLevelInTree;
        HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator reportCreator;
    	
    	public BindDirection bind_dir7 = null;
        public BindDirection bind_dir8 = null;
        public BindDirection bind_dir9 = null;
        
        public IEnumerable<FeaturesGroup> LicensedFeatures
        {
        
        get
        {
        List<FeaturesGroup> features = new List<FeaturesGroup>();
        return features;
        
        }
        
        }
        
        public WorkFlowScript()
            : base(VuserClass.CommandLineArguments, new STRunTimeContext(), "test")
        {	
        	UpdateContextWithActionFolder(String.Empty);
        	
        }
        
        public WorkFlowScript(ISTRunTimeContext ctx)
            : base(VuserClass.CommandLineArguments, ctx, "test")
            
        {
        	this._context = ctx;
        	UpdateContextWithActionFolder(String.Empty);
        	UpdateTestSettings(ctx);
        }
        
        internal void InitializeComponent()
        {
        	LoadInput();
        	
        	InitReport();
        	
        	InitializeEncryptionManagerValues();
        
        	_userCode = new TestUserCode();
            _flow = _userCode;
            _flow.Context=this._context;
            
            
        
        	_flow.StartActivity1 = new HP.ST.Ext.BasicActivities.StartActivity(_context,"StartActivity1");
            _flow.Loop2 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop2Input>(_context,"Loop2",LoopType.For);
            _flow.EndActivity3 = new HP.ST.Ext.BasicActivities.EndActivity(_context,"EndActivity3");
            _flow.Sequence22 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence22");
            _flow.StServiceCallActivity18 = new HP.ST.Ext.WebServicesActivities.StServiceCallActivity(_context,"StServiceCallActivity18");
            _flow.StServiceCallActivity21 = new HP.ST.Ext.WebServicesActivities.StServiceCallActivity(_context,"StServiceCallActivity21");
            _flow.StartActivity1.ExecutionInputParameters = this._context.ExecutionInputParameters.ValuesXmlDocument;
            _flow.StartActivity1.Comment = @"";
            _flow.StartActivity1.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.StartActivity1.Name = @"Start";
            _flow.StartActivity1.JVM = new HP.ST.Ext.BasicActivities.JVMProperties();
            _flow.StartActivity1.IsJavaUsed = false;
            _flow.StartActivity1.JVM.Classpath = @"%CLASSPATH%";
            _flow.StartActivity1.JVM.AdditionalVMParameters = @"";
            _flow.StartActivity1.JMS = new HP.ST.Ext.BasicActivities.JMSProperties();
            _flow.StartActivity1.IsJmsUsed = false;
            _flow.StartActivity1.JMS.JNDIContextFactory = @"<Select...>";
            _flow.StartActivity1.JMS.JNDIProviderUrl = @"";
            _flow.StartActivity1.JMS.JMSConnectionFactory = @"";
            _flow.StartActivity1.JMS.SecurityPrincipal = @"";
            _flow.StartActivity1.JMS.SecurityCredentials = @"";
            _flow.StartActivity1.JMS.JMSClientID = @"";
            _flow.StartActivity1.JMS.SSLPassword = @"";
            _flow.StartActivity1.JMS.SSLTrustedCertificate = @"";
            _flow.StartActivity1.JMS.SSLIdentity = @"";
            _flow.StartActivity1.JMS.ConnectionsPerProcess = @"1";
            _flow.StartActivity1.JMS.TimeoutOptions = @"DN_User_defined_Timeout";
            _flow.StartActivity1.JMS.UserTimeout = @"20";
            _flow.StartActivity1.JMS.GenerateAutoSelector = @"No";
            _flow.StartActivity1.KafkaSSL = new HP.ST.Fwk.KafkaFWK.KafkaSSLProperties();
            _flow.StartActivity1.IsKafkaUsed = false;
            _flow.StartActivity1.KafkaSSL.StrEnableSSL = @"No";
            _flow.StartActivity1.KafkaSSL.SSLCALocation = @"";
            _flow.StartActivity1.KafkaSSL.SSLClientCertificateLocation = @"";
            _flow.StartActivity1.KafkaSSL.SSLClientKeyLocation = @"";
            this.Activities.Add (_flow.StartActivity1);
            _flow.Loop2.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop2.NumberOfIterations = (int)1;
            _flow.Loop2.Comment = @"";
            _flow.Loop2.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop2.Name = @"Test Flow";
            _flow.Loop2.Activities.Add (_flow.Sequence22);
            this.Activities.Add (_flow.Loop2);
            XmlDocument EndActivity3_ExecutionOutputParameters_Document = new XmlDocument();
            EndActivity3_ExecutionOutputParameters_Document.PreserveWhitespace = true;
            EndActivity3_ExecutionOutputParameters_Document.LoadXml(
@"<Arguments><OrderNumberShipping>{Step.OutputProperties.StServiceCallActivity21.Body.CreateFlightOrderResponse.CreateFlightOrderResult.OrderNumber}</OrderNumberShipping></Arguments>");
            _flow.EndActivity3.ExecutionOutputParameters = EndActivity3_ExecutionOutputParameters_Document;
            _flow.EndActivity3.Comment = @"";
            _flow.EndActivity3.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.EndActivity3.Name = @"End";
            VTDPropertyInfoBase pi13 = new VTDPropertyInfoBase("OutputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrderResponse'][1]/*[local-name(.)='CreateFlightOrderResult'][1]/*[local-name(.)='OrderNumber'][1]");
            VTDBaseGetter binding_getter7 = new VTDXPathGetter(pi13,XmlTypeCode.Int);
            VTDPropertyInfoBase pi14 = new VTDPropertyInfoBase("ExecutionOutputParameters","/*[local-name(.)='Arguments'][1]/*[local-name(.)='OrderNumberShipping'][1]");
            VTDBaseSetter binding_setter7 = new VTDXPathSetter(pi14,XmlTypeCode.String);
            binding_setter7 = new StringFormaterDecorator(binding_setter7,"{Step.OutputProperties.StServiceCallActivity21.Body.CreateFlightOrderResponse.CreateFlightOrderResult.OrderNumber}");
            bind_dir7 = new BindDirection(_flow.StServiceCallActivity21,binding_getter7,binding_setter7,BindTargetType.ToInProperty);
            _flow.EndActivity3.InDirections.Add(bind_dir7);
            this.Activities.Add (_flow.EndActivity3);
            _flow.Sequence22.Comment = @"";
            _flow.Sequence22.IconPath = @"";
            _flow.Sequence22.Name = @"Sequence22";
            _flow.Sequence22.Activities.Add (_flow.StServiceCallActivity18);
            _flow.Sequence22.Activities.Add (_flow.StServiceCallActivity21);
            XmlDocument StServiceCallActivity18_InputEnvelope_Document = new XmlDocument();
            StServiceCallActivity18_InputEnvelope_Document.PreserveWhitespace = true;
            StServiceCallActivity18_InputEnvelope_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/""><Body><GetFlights xmlns=""HP.SOAQ.SampleApp""><DepartureCity>London</DepartureCity><ArrivalCity>Paris</ArrivalCity><FlightDate>2022-11-30T00:00:00+00:00</FlightDate></GetFlights></Body></Envelope>");
            _flow.StServiceCallActivity18.InputEnvelope = StServiceCallActivity18_InputEnvelope_Document;
            _flow.StServiceCallActivity18.Comment = @"";
            _flow.StServiceCallActivity18.IconPath = @"AddIns\ServiceTest\WSImportTechnology\ictb_service_operations_16.png";
            _flow.StServiceCallActivity18.Name = @"GetFlights";
            _flow.StServiceCallActivity18.TransportProtocol.SOAPProperties.EndpointAddress = _context.ResourceManager == null || String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity18.TransportProtocol.SOAPProperties.EndpointAddress}")) ? @"http://localhost:8000/Flights_SOAP" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity18.TransportProtocol.SOAPProperties.EndpointAddress}");
            _flow.StServiceCallActivity18.TransportProtocol.SOAPProperties.SoapAction = @"HP.SOAQ.SampleApp/IFlightsSoapService/GetFlights";
            _flow.StServiceCallActivity18.TransportProtocol.SOAPProperties.ContentType = @"text/xml; charset=utf-8";
            _flow.StServiceCallActivity18.TransportProtocol.SOAPProperties.Timeout = (int)100000;
            _flow.StServiceCallActivity18.Service = @"Flights_Service";
            _flow.StServiceCallActivity18.Port = @"FlightsServiceMethods";
            _flow.StServiceCallActivity18.Operation = @"GetFlights";
            _flow.StServiceCallActivity18.IsOneWay = false;
            _flow.StServiceCallActivity18.SendRequestToService=true;
            _flow.StServiceCallActivity18.FaultExpected=false;
            _flow.StServiceCallActivity18.IsAsync=false;
            _flow.StServiceCallActivity18.TargetNamespace=@"http://tempuri.org/";
            _flow.StServiceCallActivity18.ListenOnPort = (int)0;
            XmlDocument StServiceCallActivity18_ExpectedOutputAttachments_Document = new XmlDocument();
            StServiceCallActivity18_ExpectedOutputAttachments_Document.PreserveWhitespace = true;
            StServiceCallActivity18_ExpectedOutputAttachments_Document.LoadXml(
@"<OutputAttachments />");
            _flow.StServiceCallActivity18.ExpectedOutputAttachments = StServiceCallActivity18_ExpectedOutputAttachments_Document;
            XmlDocument StServiceCallActivity18_ExpectedFaultProperties_Document = new XmlDocument();
            StServiceCallActivity18_ExpectedFaultProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity18_ExpectedFaultProperties_Document.LoadXml(
@"<tns:Envelope xmlns:tns=""http://schemas.xmlsoap.org/soap/envelope/""><tns:Body><tns:Fault><faultcode /><faultstring /></tns:Fault></tns:Body></tns:Envelope>");
            _flow.StServiceCallActivity18.ExpectedFaultProperties = StServiceCallActivity18_ExpectedFaultProperties_Document;
            XmlDocument StServiceCallActivity18_ExpectedOutputProperties_Document = new XmlDocument();
            StServiceCallActivity18_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity18_ExpectedOutputProperties_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:p1=""http://www.w3.org/2001/XMLSchema-instance""><Body><GetFlightsResponse xmlns=""HP.SOAQ.SampleApp""><GetFlightsResult><Flight><Airline p1:nil=""true"" /><ArrivalCity p1:nil=""true"" /><ArrivalTime p1:nil=""true"" /><DepartureCity p1:nil=""true"" /><DepartureTime p1:nil=""true"" /><FlightNumber /></Flight></GetFlightsResult></GetFlightsResponse></Body></Envelope>");
            _flow.StServiceCallActivity18.ExpectedOutputProperties = StServiceCallActivity18_ExpectedOutputProperties_Document;
            set_StServiceCallActivity18_checkpoints(_flow.StServiceCallActivity18);
            XmlDocument StServiceCallActivity21_InputEnvelope_Document = new XmlDocument();
            StServiceCallActivity21_InputEnvelope_Document.PreserveWhitespace = true;
            StServiceCallActivity21_InputEnvelope_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:p1=""http://www.w3.org/2001/XMLSchema-instance""><Body><CreateFlightOrder xmlns=""HP.SOAQ.SampleApp""><FlightOrder><Class>First</Class><CustomerName p1:nil=""true"">{Step.OutputProperties.StartActivity1.CustomerOrder}</CustomerName><DepartureDate>2022-11-30T00:00:00+00:00</DepartureDate><FlightNumber>{Step.OutputProperties.StServiceCallActivity18.Body.GetFlightsResponse.GetFlightsResult.Flight[1].FlightNumber}</FlightNumber><NumberOfTickets>1</NumberOfTickets></FlightOrder></CreateFlightOrder></Body></Envelope>");
            _flow.StServiceCallActivity21.InputEnvelope = StServiceCallActivity21_InputEnvelope_Document;
            _flow.StServiceCallActivity21.Comment = @"";
            _flow.StServiceCallActivity21.IconPath = @"AddIns\ServiceTest\WSImportTechnology\ictb_service_operations_16.png";
            _flow.StServiceCallActivity21.Name = @"CreateFlightOrder";
            _flow.StServiceCallActivity21.TransportProtocol.SOAPProperties.EndpointAddress = _context.ResourceManager == null || String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity21.TransportProtocol.SOAPProperties.EndpointAddress}")) ? @"http://localhost:8000/Flights_SOAP" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity21.TransportProtocol.SOAPProperties.EndpointAddress}");
            _flow.StServiceCallActivity21.TransportProtocol.SOAPProperties.SoapAction = @"HP.SOAQ.SampleApp/IFlightsSoapService/CreateFlightOrder";
            _flow.StServiceCallActivity21.TransportProtocol.SOAPProperties.ContentType = @"text/xml; charset=utf-8";
            _flow.StServiceCallActivity21.TransportProtocol.SOAPProperties.Timeout = (int)100000;
            _flow.StServiceCallActivity21.Service = @"Flights_Service";
            _flow.StServiceCallActivity21.Port = @"FlightsServiceMethods";
            _flow.StServiceCallActivity21.Operation = @"CreateFlightOrder";
            _flow.StServiceCallActivity21.IsOneWay = false;
            _flow.StServiceCallActivity21.SendRequestToService=true;
            _flow.StServiceCallActivity21.FaultExpected=false;
            _flow.StServiceCallActivity21.IsAsync=false;
            _flow.StServiceCallActivity21.TargetNamespace=@"http://tempuri.org/";
            _flow.StServiceCallActivity21.ListenOnPort = (int)0;
            VTDPropertyInfoBase pi15 = new VTDPropertyInfoBase("OutputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlightsResponse'][1]/*[local-name(.)='GetFlightsResult'][1]/*[local-name(.)='Flight'][{Array0}]/*[local-name(.)='FlightNumber'][1]");
            VTDBaseGetter binding_getter8 = new VTDXPathGetter(pi15,XmlTypeCode.Int);
            binding_getter8 = new XPathGetterDecorator(binding_getter8,"{Array0}",1);
            VTDPropertyInfoBase pi16 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrder'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='FlightNumber'][1]");
            VTDBaseSetter binding_setter8 = new VTDXPathSetter(pi16,XmlTypeCode.Int);
            bind_dir8 = new BindDirection(_flow.StServiceCallActivity18,binding_getter8,binding_setter8,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity21.InDirections.Add(bind_dir8);
            VTDPropertyInfoBase pi17 = new VTDPropertyInfoBase("ExecutionInputParameters","/*[local-name(.)='Arguments'][1]/*[local-name(.)='CustomerOrder'][1]");
            VTDBaseGetter binding_getter9 = new VTDXPathGetter(pi17,XmlTypeCode.String);
            VTDPropertyInfoBase pi18 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrder'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='CustomerName'][1]");
            VTDBaseSetter binding_setter9 = new VTDXPathSetter(pi18,XmlTypeCode.String);
            binding_setter9 = new StringFormaterDecorator(binding_setter9,"{Step.OutputProperties.StartActivity1.CustomerOrder}");
            bind_dir9 = new BindDirection(_flow.StartActivity1,binding_getter9,binding_setter9,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity21.InDirections.Add(bind_dir9);
            XmlDocument StServiceCallActivity21_ExpectedOutputAttachments_Document = new XmlDocument();
            StServiceCallActivity21_ExpectedOutputAttachments_Document.PreserveWhitespace = true;
            StServiceCallActivity21_ExpectedOutputAttachments_Document.LoadXml(
@"<OutputAttachments />");
            _flow.StServiceCallActivity21.ExpectedOutputAttachments = StServiceCallActivity21_ExpectedOutputAttachments_Document;
            XmlDocument StServiceCallActivity21_ExpectedFaultProperties_Document = new XmlDocument();
            StServiceCallActivity21_ExpectedFaultProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity21_ExpectedFaultProperties_Document.LoadXml(
@"<tns:Envelope xmlns:tns=""http://schemas.xmlsoap.org/soap/envelope/""><tns:Body><tns:Fault><faultcode /><faultstring /></tns:Fault></tns:Body></tns:Envelope>");
            _flow.StServiceCallActivity21.ExpectedFaultProperties = StServiceCallActivity21_ExpectedFaultProperties_Document;
            XmlDocument StServiceCallActivity21_ExpectedOutputProperties_Document = new XmlDocument();
            StServiceCallActivity21_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity21_ExpectedOutputProperties_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/""><Body><CreateFlightOrderResponse xmlns=""HP.SOAQ.SampleApp""><CreateFlightOrderResult><OrderNumber /></CreateFlightOrderResult></CreateFlightOrderResponse></Body></Envelope>");
            _flow.StServiceCallActivity21.ExpectedOutputProperties = StServiceCallActivity21_ExpectedOutputProperties_Document;
            set_StServiceCallActivity21_checkpoints(_flow.StServiceCallActivity21);
            
        }
        
        internal void InitializeEncryptionManagerValues()
        {
        
        }
        	
    	bool useReport = true;
    
    	protected override STExecutionResult ExecuteStep()
        {
            return base.ExecuteStep();
        }
    
        public void Start()
        {
    	    try
    		{
    		  Workflow_Executing();
    		  this.ExecuteStep();
    		}
    		finally
    		{
    		  WorkFlowScript_Completed();
    		}
        }
    
    	private void InitReport()
    	{
    		if (useReport)
    		{	
    			// Intialize Reporter
    			string reportDBDir = Path.Combine(this._context.ReportDirectory, @"Report");
    			CleanupReport(reportDBDir);        	
    			string reportDBPath = Path.Combine(reportDBDir, "VTDReport.mdb");        	
    			if (reporter == null)
    			{
    				reporter = new Reporter(reportDBPath);
    			}
    			_context.Reporter = reporter;
    		}
    	}
    
        public static void CopyDirectory(string Src, string Dst)
        {
            String[] Files;
    
            if (Dst[Dst.Length - 1] != Path.DirectorySeparatorChar)
                Dst += Path.DirectorySeparatorChar;
            if (!Directory.Exists(Dst)) Directory.CreateDirectory(Dst);
            Files = Directory.GetFileSystemEntries(Src);
            foreach (string Element in Files)
            {
                // Sub directories
                if (Directory.Exists(Element))
                    CopyDirectory(Element, Dst + Path.GetFileName(Element));
                // Files in directory
                else
                    File.Copy(Element, Dst + Path.GetFileName(Element), true);
            }
        }
        
        private void CleanupReport(string reportDBDir)
        {   
    		if (useReport)
    		{             
    			string reportTemplateDir = Path.Combine(ServiceTestRunner.GetInstallPath(), "bin", "ReportResources");
    			try
    			{
            		CopyDirectory(reportTemplateDir, reportDBDir);
    			}
    			catch //(Exception ex)
    			{
    				//ToDo: LoggingService.Warn("Report Cleanup Error", ex);
    			}
    		}
        }
    
        void Workflow_Executing()
        {   
        	InitReportNode();
                       
        }
    
    	private void InitReportNode()
    	{
    		if (useReport)
    		{	
        		// Init report creator
    			this.reportCreator = new HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator();
    			this.reportLevelInTree = reportCreator.Init(_context.EnvironmentProfile.GetVariableValue("TestName"), _context);
                
    			STActivityBase activity = this;
    			string workflowID = activity.GetHashCode().ToString();
    			ReportNodeCreationData newNodeData =
    			new ReportNodeCreationData(workflowID, workflowID, DateTime.Now);
    			reporter.CreateReportNode(newNodeData);
            
    			ReportInfoData newReportData = new ReportInfoData(workflowID, ReportKeywords.TypeKeywordTag, this.GetType().ToString());
    			reporter.SendReportData(newReportData);
    			newReportData = new ReportInfoData(workflowID, ReportKeywords.NameKeywordTag, this.Name);
    			//TrackData(ReportInfoData.InfoDataTag, newReportData);
    			reporter.SendReportData(newReportData);            
            }
    	}
        
        void WorkFlowScript_Completed()
        {   
    		
    
    		CreateReportFiles();
    					
        	// Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
    
    		OnExecutionCompleted();
    		
        }
    
    	private void CreateReportFiles()
    	{
    		if (useReport)
    		{	
    			//Dispose reporter inorder to close connection to report DB
           		this._context.Reporter.Dispose();
            	
           		// Run report creator
    			reportCreator.RunOnDBAndCreateFiles();
    		}
    	}
    
        
        void Workflow_Faulting()
        {
    		
    
    		CreateReportFiles();
            // Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
           
    		OnExecutionCompleted();
        }
    
    	protected override QcSystemVariables GetRuntimeQcVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeQcVariables(this._context);
    	}
            
    	protected override TestSystemVariables GetTestSystemVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeTestVariables(this._context);
    	}
    
    	private void UpdateTestSettings(ISTRunTimeContext ctx)
        {
    		ctx.PropertyBag["StopTestOnStepFailure"] = true;
    	}
    }
    
    public partial class VuserClass
    {
    	public static string[] CommandLineArguments;
    	public static string[] DotNetResolverPaths;
    	
        public VuserClass()
        {
    				
    		AssemblyResolver.AddSTPathsToResolutionPaths();
    		AssemblyResolver.AttachToAppdomain();
        }
    
        private void AddAssemblyResolver()
        {
    		AssemblyResolver.AddTestPathToResolutionPaths(GetTestPath());
    		AssemblyResolver.AddPathsForAssemblyResolution(DotNetResolverPaths);
        }
    	
        public int STAction()
        {	
            AddAssemblyResolver();
            STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
            WorkFlowScript script = new WorkFlowScript(ctx);
            script.InitializeComponent();
            script.Start();       
            
            return 0;
        }
        
        public void NotifyLicenseException(string msg)
        {
        		
    		try
    		{
    		    STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
                WorkFlowScript script = new WorkFlowScript(ctx);
                script.InitializeComponent();
                script.Context.ReplayClient.OnLicenseFailure(msg);
                
            }
            catch (Exception)
            {
    			// ToDo: log the error message
            }        
        }
    
    	 protected string GetTestPath()
            {
                if (CommandLineArguments != null)
                {
                    for (int i = 0; i < CommandLineArguments.Length; i++)
                    {
                        if (CommandLineArguments[i].Equals("-test", StringComparison.OrdinalIgnoreCase))
                        {
                            return CommandLineArguments[i + 1];
                        }
                    }
                }
                return String.Empty;
            }
        
    }
    
    }
    